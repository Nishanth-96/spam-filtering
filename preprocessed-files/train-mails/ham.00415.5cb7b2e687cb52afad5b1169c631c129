on sat number jul number number : number , you wrote : > on fri , jul number , number at number : number : numberpm +number , john gay wrote : > > a while ago i ask what other packag i should optom for pentium . > > one person answer glibc . thi got me think about gcc itself , so i > > ask on anoth list and got a few answer , most were `` do n't even think > > about it '' but a few suggest gcc and one point me to linux from > > scratch . > > whi ? > > or more specif , what do you mean ? on one hand you can optimis > how gcc is compil . all that will do is make it gener the exact > same code just a smidg faster . and sinc gcc is such a memori pig , > you 'd do better to buy more ram to up your fs cach hit and to keep > gcc 's heap out of swap . > to explain what i mean : accord to the pgcc site , gcc by itself is not veri good at take advantag of the pipelin featur introduc with the pentium famili . the pgcc patch are suppos to make gcc gener tighter code , but your point about compil bug is well taken . thi is whi i am take thing slow and look into these thing . as isaid , the pgcc site doe not seem to have been updat in at least a year or more ? ! ? i am also look into gcc itself . now that the number.numb . seri is out , it might be better than when the pgcc patch were written . the bottom line is , pentium have better instruct set than the origin number instruct that they still support . the pentium also start introduc pipelin so properli gener code can be upto number % faster than equivul code that perform the same function ! as for whi optimis gcc if it will onli produc that same code onli slightli faster ? the speed is base on a percentag of the total compil time . the first time i compil the qt lib , with onli numberm and a lot of swap , it took over number hour . i 've now got numberm in the box but at numbermhz ani increas , distribut over such a long compil is still consider . > on the other side you can look into patch to gcc that affect it' > code gener . um , ok , but keep in mind that compil error suck . > i ca n't express that enough . compil should just work . perfectli . > alway . do anyth that might affect that is , in my opinion , insan . > they 're hard to trace and you 'd better have a deep knowledg of what' > go on to either report bug to the patch develop or to fix it > yourself . plu my understand is that gcc would need major chang > to get larg speed boost on xnumber chip . > my understand , and i 've follow the develop of the intel famili sinc the number , each gener sinc the number ha introduc better and faster instruct . i.e . : the number introduc i.e.e. float point instruct by incorpor an fpu on board . the first few gener were flaki , so intel disabl the dodgi one and sold then as numbersx , i.e . without the fpu . later gener were better , thi is whi you onli find slow numbersx 's ; - ) therefor number 's , with work fpu 's can calcul float faster than number 's , but you must gener the proper code to take advantag of thi . the pentium 's improv the fpu logic and introduc pipelin . the first gener of pentium had faulti fpu logic program into them , the pentium bug , but subsequ one were fine . these ad instruct are faster again then the number equivul . also , the pipelin need care instruct order to take full advantag of it 's speed improv , again , someth the compil must know about to utilis to full effect . accord the the pgcc site gcc doe thi poorli , but that info seem to be date , gccnumber.number.x might be better . thi is one of the area i am research close to get an answer . mmx ad the abil to perform matrix calcul on int 's with singl instruct and use special dma featur within the pentium to speed thi up . two problem with thi : number ) int 's are not veri use for most matrix calcul , float would be better . number ) thi is not someth that can be optimis well by a compil . it need to be identifi and provid for in the sourc . i.e . not much use to anyon , but make great ad copi ; - ) the pentiumpro improv the pipelin enorm . again , a properli written compil should be abl to optimis for thi , onc it can organis the code properli . the piii ad mmx-type instruct for float ! now thi is use ! graphic-intens program can take great advantag of thi , but it must be provid for in the sourc code . compil can not , usual optimis for thi sort of thing . xfreenumb and dri are two prime exampl that do provid for thi , so the piii can run xfreenumb and dri quit a bit faster , if it 's compil for these sse instruct ! not sure what improv the pnumber introduc ? i think it 's mostli just speed improv rather than ani execut chang . so , the differ between the number and the pentiummmx 'should ' yield a signific speed boost if optimis correctli . there are faster float point instruct and pipelin that need optimis for . i 'm not sure if gcc can optimis properli for the pipelin , at least the pgcc group found signific improv to add to gccnumber.number.numb to gain speed improv of upto number % . number % of number hour is number.numb hour . of cours none of thi will have ani effect on o/i bound process but gui 's are mostli cpu bound . i am also find out about object pre-link optimis which should give even better perform for qt and kde . now if i had anoth piii for my box , i could take advantag of those sse instruct to optimis xfreenumb as well ! > kevin an , of cours , i 've load of time on my hand now and i need someth to keep me busi . at least i can say that i 've sucess built a full linux system , includ kdenumb from scratch when i 'm done ; - ) cheer , john gay -- irish linux user ' group : emailaddr httpaddr for ( un ) subscript inform . list maintain : emailaddr
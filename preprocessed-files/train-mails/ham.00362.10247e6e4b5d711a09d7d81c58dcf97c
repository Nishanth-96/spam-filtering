on mon , aug number , number at number : number : numberpm +number , nick murtagh wrote : > on mon , number-number-numb at number : number , kenn humborg wrote : > > well , you should consid 'break ' insid a 'select ' statement > > to be part of the syntax , rather than a control flow modifi . > > whi ? when it come down to the assembl level , it get turn > into some kind of jump instruct . should i pretend i do n't know > thi when i 'm program ? i know that . and no , you should n't . but see below . > > a _mandatory_ part of the syntax , at that . > > it 's not mandatori . you can leav out the break , and the flow > of control will continu to the next case . which can be use > in certain circumst . i know that , too . howev , the discuss wa tend toward '' do n't use thing like goto and break to alter flow of control in your program '' . while not valid number % of the time , it 's a reason rule of thumb . the idea is that , when look at code , it 's easier to see how control move through a function if your basic control block do all the work . the specif exampl of replac a break in a while loop with a modifi while ( ) express show thi . you onli have to look in one place to see when you 'll run off the end of the loop , not hunt through the whole loop . ( although that particular exampl wa n't realli that good , sinc the extra test wa ad on ( ... || done ) and set done = true in the loop . which is much the same as a break realli . ) the idea is to surpris the next programm as littl as possibl when he see the code . in a similar vein , have a break in everi case of a select block make the flow much clearer . flow goe in , zero or one case block are execut and flow come out the bottom . leav out break statement break thi assumpt . my point is that , while there are a few situat where it make sens to leav out the break , i usual tend to consid the break at the end of each case more like the brace at the end of the while block . in fact , mayb it would n't have been a bad idea if the languag wa design such that the continu statement meant fall through and break wa n't need : select ( x ) { case number : /* do someth - doe n't fall through */ case number : /* do someth - fall through to next case*/ continu ; case number : /* do someth - doe n't fall through */ default : /* do someth - doe n't fall through */ } still , hindsight and all that . sigh . later , kenn -- irish linux user ' group : emailaddr httpaddr for ( un ) subscript inform . list maintain : emailaddr
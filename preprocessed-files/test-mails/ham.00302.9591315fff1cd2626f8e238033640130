brian o'donoghu wrote a code fragment : > for ( a=numb ; a { > some_thing_goes_her ( ) ; > > if ( b=strlen ( somestr ) -number ) > do_someth ; > > } ; unfortun strlen is a rel expens oper . if you are use c++ thi is not such a big issu as string.length ( ) can be declar const . so long as you do not modifi the string object , the compil can do the cach for you . i do not think thi is possibl in c , though ? you could write the same code fragment as : ============================ for ( a=numb , l=strlen ( somestr ) ; a < l ; a++ ) { some_thing_goes_her ( ) ; if ( b==l-number ) do_someth ( ) ; } ============================ note my previou point : if some_thing_goes_her ( ) or do_someth ( ) are veri long function , then there is no real need to optimis thi code . also , for string manipul , a much better approach would be : ============================ char c ; char* p ; for ( p=somestr , ( c=*p ) ! =number ; p++ ) { some_thing_goes_her ( ) ; if ( * ( p+number ) ==number ) do_someth ( ) ; } ============================ thi work becaus c use \number termin string . it improv perform becaus you alway have a pointer to the charact instead of have to do array manipul . strictli speak , the variabl c is not requir as most compil are smart enough to store *p in a regist . the problem is that thi use pointer arithmet , which can make the code illeg if not manag care . which is one of the reason i prefer java for most program task . : ) - matthew __________________________________________________ do you yahoo ! ? everyth you 'll ever need on one web page from news and sport to email and music chart httpaddr -- irish linux user ' group : emailaddr httpaddr for ( un ) subscript inform . list maintain : emailaddr
john gay wrote : > look into these thing . as isaid , the pgcc site doe not seem to have been > updat in at least a year or more ? ! ? i am also look into gcc itself . now > that the number.numb . seri is out , it might be better than when the pgcc patch > were written gcc ha been as good as or better than pgcc for quit a while . pgcc wa wa written back in the day when gcc splinter due to a percept of slow progress on the main branch . a number of linux distribut wound up use egc , partli deriv from the pgcc work as i recal . happi wa restor to the world with gcc number.numb and later . > the bottom line is , pentium have better instruct set than > the origin number instruct that they still support . not realli , no . the onli instruct of consequ ( to gcc anyway ) sinc the inumb wa the cmov introduc with the pentium pro . gcc number.numb will use that instruct if direct to with -march=pentiumpro and you will gener get a few percent improv out of it . code compil with that option will fail on pentium and earlier processor . > the pentium also > start introduc pipelin so properli gener code can be upto number % > faster than equivul code that perform the same function ! that 's the art of instruct schedul - rearrang the instruct gener by the compil such that they make best use of the parallel ( `` superscalar '' ) pipelin present in a modern cpu . gcc number.numb ha a fair go at schedul accord to the -mcpu=pentium/pentiumpro option . gcc number.numb doe a better job , and fine tune for a few more processor such as athlon and athlon-xp . they 're in the process of replac the compil 's instruct schedul with a whole new mechan that should do an even better job , but that 's a way down the road yet in gcc number.numb . as for the exot extra instruct set , gcc number.numb will make use of sse or ssenumb instruct instead of number instruct if you use the -mfpmath=ss option and you may see some speed benefit from it , but there 's a chanc you may also see incompat . gcc will still use inumb code for miss function in the sse instruct set ( doubl precis float for exampl ) . afaik no current gcc will ever use mmx or numberdnow ! instruct though gcc number.numb enabl user code to explicitli gener these instruct with c code . the kernel sometim use these instruct set to get super-fast block copi of memori or raid math but not much els . > not sure what improv the pnumber introduc ? i think it 's mostli just speed > improv rather than ani execut chang . pnumber introduc ssenumb , a _much_ improv version of sse and a viabl replac for inumb fpu code . sse support onli singl precis float while ssenumb can handl doubl . mmx and sse share regist with the fpu which hobbl them a bit , but ssenumb ha it own larg , dedic regist file . so far pnumber is the onli cpu equip with ssenumb . amd 's xnumber-numb cpu are said to have it as well . of cours xnumber-numb itself is a whole other ball game ... paul . -- irish linux user ' group : emailaddr httpaddr for ( un ) subscript inform . list maintain : emailaddr